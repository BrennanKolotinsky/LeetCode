// class Solution {
//     public int minimumTotal(List<List<Integer>> triangle) {
        
//         int[] dp = new int[triangle.size() + 1];
        
//         for (int i = triangle.size() - 1; i >= 0; i--) {
//             List<Integer> curr = triangle.get(i);
//             for (int j = 0; j < i + 1; j++)
//                 dp[j] = curr.get(j) + Math.min(dp[j], dp[j + 1]);
//         }
            
        
//         return dp[0];
//     }
// }

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if (triangle.size() == 0)
            return 0;
        
        // dynamic programming -- start on the second line from the end
        for (int i = triangle.size() - 2; i >= 0; i--)
            for (int j = 0; j < triangle.get(i).size(); j++)
                triangle.get(i).set(j, Math.min(triangle.get(i + 1).get(j), triangle.get(i + 1).get(j + 1)) + triangle.get(i).get(j));
        
        return triangle.get(0).get(0);
    }
}
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        
        HashMap<Node, Node> map = new HashMap<>();
        Node solHead = new Node(head.val), solTmp = solHead, tmpHead = head;
        map.put(tmpHead, solHead);
        
        while (tmpHead.next != null) {
            tmpHead = tmpHead.next;
            solTmp.next = new Node(tmpHead.val);
            solTmp = solTmp.next;
            map.put(tmpHead, solTmp);
        }
        
        tmpHead = head;
        solTmp = solHead;
        
        while (tmpHead != null) {
            solTmp.random = map.get(tmpHead.random);
            solTmp = solTmp.next;
            tmpHead = tmpHead.next;
        }
        
        return solHead;
    }
}
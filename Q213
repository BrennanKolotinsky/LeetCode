class Solution {
    public int rob(int[] nums) {
        
        if (nums.length == 0)
            return 0;
        else if (nums.length == 1)
            return nums[0];
        
        int[] first = new int[nums.length + 1]; // assume we pick the first
        int[] second = new int[nums.length + 1];
        
        first[0] = 0;
        first[1] = nums[0];
        
        second[0] = 0;
        second[1] = 0;
        
        for (int i = 2; i <= nums.length; i++) {
            first[i] = Math.max(first[i - 1], first[i - 2] + nums[i-1]); // pick the optimal previous house OR pick the current and only have optimal choice of the one two houses back
            second[i] = Math.max(second[i - 1], second[i - 2] + nums[i-1]);
        }
        
        // first can't grab the last house! -- we set the last house at nums.length
        return Math.max(first[nums.length - 1], second[nums.length]);        
    }
}
class Solution {
    public int maxPoints(int[][] points) {
        
        if (points.length == 0)
            return 0;
        
        HashMap<List<Integer>, Integer> map = new HashMap<>(); // slope of the points is the arr
        int res = 0;
        
        for (int i = 0; i < points.length; i++) {
            
            int sameCnt = 0; // automatically on the line
            int max = 0;
            
            for (int j = i + 1; j < points.length; j++) {
                int dy = points[j][1]- points[i][1];
                int dx = points[j][0] - points[i][0];
                
                if (dy == 0 && dx == 0) {
                    sameCnt++;
                } else {
                    List<Integer> tmp = getSlope(dy, dx);
                    map.put(tmp, map.getOrDefault(tmp, 0) + 1);
                    max = Math.max(max, map.get(tmp));    
                }
            }
                        
            res = Math.max(res, max + sameCnt + 1);
            map.clear();
        }
        
        return res;
    }
    
    public List<Integer> getSlope(int dy, int dx) {
        if (dx == 0)
            return Arrays.asList(1, 0);
        else if (dy == 0)
            return Arrays.asList(0, 1);
        
        int slope = gcd(dy, dx);
        return Arrays.asList(dy / slope, dx / slope);
    }
    
    // EUCLIDEAN FORMULA
    public int gcd(int a, int b) {
        if (b == 0)
            return a;
        return (gcd(b, a % b));
    }
}
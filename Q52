class Solution {
    
    private List<List<String>> sol;
    private int[][] mvs = {{1, -1}, {1, 1}, {-1, 1}, {-1, -1}}; // these are the diagonal moves we could potentially make
    private String periods; // this is the default string in a row
    
    public Solution() {
        this.sol = new ArrayList<>();
    }
    
    public List<List<String>> solveNQueens(int n) {
        
        boolean[][] tmp = new boolean[n][n]; // true represents a queen
        
        // we will cache whether the horizontal and vertical are free -- it may be possible to cache diagonals too -- however, I never considered it -- I would need to analyze a board and check for patterns
        boolean[] hor = new boolean[n];
        
        dfs(tmp, n, 0, hor, 0);
        return this.sol;
    }
    
    public void dfs(boolean[][] curr, int n, int added, boolean[] hor, int vert) {
        
        if (n == added) {
            // we need to clone so that the answer doesn't change as we update in the future
            List<String> tmp = createBoard(curr);
            sol.add(tmp);
            return;
        }
                    
        for (int j = 0; j < n; j++) {
            if (hor[j])
                continue;

            boolean skip = false;

            for (int[] mv : this.mvs) {
                // we can't add due to this check
                if (!check(curr, j + mv[0], vert + mv[1], mv[0], mv[1])) {
                    skip = true;
                    break;
                }
            }

            if (skip)
                continue;

            hor[j] = true;

            // create a new string with the added q on the board
            curr[vert][j] = true;
            dfs(curr, n, added + 1, hor, vert + 1);

            // reset the changes made for the next loops!
            hor[j] = false;
            curr[vert][j] = false; // reset to all periods
        }        
    }
    
    // returns true if we can add the value
    public boolean check(boolean[][] curr, int x, int y, int mvx, int mvy) { 
        // made it to the end successfully
        if (x < 0 || x == curr.length || y < 0 || y == curr.length)
            return true;
        
        return curr[y][x] ? false : check(curr, x + mvx, y + mvy, mvx, mvy);
    }
    
    public List<String> createBoard(boolean[][] board) {
        List<String> ans = new ArrayList<>();
        
        for (boolean[] ln : board) {
            StringBuilder sb = new StringBuilder("");
            
            for (boolean c : ln)
                sb.append(c ? "Q" : ".");

            ans.add(sb.toString());
        }
            
        return ans;   
    }
}
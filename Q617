/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        // iterative
        if (t1 == null) return t2;
        
        Stack <TreeNode[]> stack = new Stack<TreeNode[]>();
        stack.push(new TreeNode[] {t1, t2}); // create an array contaiining both tree nodes
        
        while (!stack.isEmpty()) {
            TreeNode[] t = stack.pop();
            
            // if either are empty skip to the next value
            if (t[0] == null || t[1] == null) {
                continue;
            }
            
            // both have values so add them
            t[0].val += t[1].val;
            
            // move the extra part from the second tree over -- else add the next values to the stack
            if (t[0].left == null) {
                t[0].left = t[1].left;
            } else {
                stack.push(new TreeNode[] {t[0].left, t[1].left});
            }
            
            if (t[0].right == null) {
                t[0].right = t[1].right;
            } else {
                stack.push(new TreeNode[] {t[0].right, t[1].right});
            }
        }
        
        return t1;
        
        // recursive
//         if (t1 == null) return t2;
//         if (t2 == null) return t1;
//         t1.val += t2.val;
        
//         t1.left = mergeTrees(t1.left, t2.left);
//         t1.right = mergeTrees(t1.right, t2.right);
                
//         return t1;
    }
}
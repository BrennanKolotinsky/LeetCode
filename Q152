class Solution {
    public int maxProduct(int[] nums) {
        
        if (nums.length == 0)
            return 0;
        
        int[] dpPos = new int[nums.length];
        int[] dpNeg = new int[nums.length];
        
        int max = 0;
        
        if (nums[0] > 0)
            dpPos[0] = nums[0];
        else
            dpNeg[0] = nums[0];
        
        max = nums[0]; // if the array is [-2], we return -2 --> I assumed max would be zero but it will be the first number worst case scenario!
        
        for (int i = 1; i < nums.length; i++) {
            
            if (nums[i] > 0) {
                dpPos[i] = Math.max(nums[i], dpPos[i - 1] * nums[i]); // the max covers the case if the previous value was zero (then we will just take this value)
                dpNeg[i] = dpNeg[i - 1] * nums[i];
            } else {
                dpPos[i] = dpNeg[i - 1] * nums[i];
                dpNeg[i] = Math.min(nums[i], dpPos[i - 1] * nums[i]);
            }
            
            max = Math.max(dpPos[i], max);
        }
        
        return max;
    }
}
class Solution {
    public List<String> letterCombinations(String digits) {
        
        List<String> sol = new ArrayList<String>();
        if (digits.length() == 0) return sol;
        
        // stole data structure from the first answer
        String[] map = new String[] {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        helper(0, map, sol, "", digits);
            
        return sol;
    }
    
    public void helper(int position, String[] map, List<String> sol, String curr, String digits) {
        if (position == digits.length()) {
            sol.add(curr);
        } else if (position < digits.length()) {
            String comb;
            if (position == digits.length() - 1) {
                comb = digits.substring(position);
            } else {
                comb = digits.substring(position, position + 1);
            }
            
            int combNum = Integer.parseInt(comb) - 2; // substract two cuz skip 0 and 1
            
            for (int i = 0; i < map[combNum].length(); i++) {
                if (i == map[combNum].length()) { 
                    helper(position + 1, map, sol, curr + map[combNum].substring(i), digits);
                } else {
                    helper(position + 1, map, sol, curr + map[combNum].substring(i, i + 1), digits);
                }
            }
        }
    }
}
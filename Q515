/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> sol = new ArrayList<>();
        dfs(root, 0, sol);
        return sol;
    }
    
    public void dfs(TreeNode root, int depth, List<Integer> sol) {
        
        if (root == null)
            return;
        
        // first time hitting this depth!
        if (depth == sol.size())
            sol.add(root.val);
        else
            sol.set(depth, Math.max(sol.get(depth), root.val));
        
        dfs(root.left, depth + 1, sol);
        dfs(root.right, depth + 1, sol);
    }
    
}
class TrieNode {
    
    public char val;
    public Boolean isWord = false;
    public TrieNode[] children = new TrieNode[26];
    
    // call this when creating a new trienode
    public TrieNode() {
    }
    
    TrieNode(char c) {
        TrieNode node = new TrieNode();
        node.val = c;
    } 
}

class Trie {

    private TrieNode root;
    
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
        root.val = ' ';
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode ws = root;
        for (int i = 0; i < word.length(); i++) {
            // node hasn't been created
            int ltrNum = word.charAt(i) - 'a';
            if (ws.children[ltrNum] == null) {
                TrieNode tmp = new TrieNode(word.charAt(i));
                ws.children[ltrNum] = tmp;
                ws = ws.children[ltrNum]; // advance the root
            } else {
                ws = ws.children[ltrNum]; // advance the root
            }
        }
        
        ws.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode ws = root;
        for (int i = 0; i < word.length(); i++) {
            // node hasn't been created
            int ltrNum = word.charAt(i) - 'a';
            if (ws.children[ltrNum] == null) {
                return false;
            } else {
                ws = ws.children[ltrNum]; // advance the root
            }
        }
        
        return ws.isWord; // could be the prefix to a word
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode ws = root;
        for (int i = 0; i < prefix.length(); i++) {
            // node hasn't been created
            int ltrNum = prefix.charAt(i) - 'a';
            if (ws.children[ltrNum] == null) {
                return false;
            } else {
                ws = ws.children[ltrNum]; // advance the root
            }
        }
        
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
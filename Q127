class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        if(beginWord.equals(endWord))
            return 0;
        
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        int steps = 1;
        
        while (!q.isEmpty()) {
                
            int len = q.size();
            
            for (int i = 0; i < len; i++) {
                
                String curr = q.poll();
                
                // found the string
                if (differences(curr, endWord) == 0)
                    return steps;
                
                for (int j = 0; j < wordList.size(); j++) {
                    String testCase = wordList.get(j);
                    
                    if (testCase.equals(""))
                        continue;
                    
                    int diffs = differences(curr, testCase);
                    
                    // this should only happen on the first time we find our first string
                    if (diffs == 0)
                        wordList.set(j, "");
                    
                    if (diffs == 1) {
                        System.out.println(steps);
                        System.out.println(testCase);
                        q.offer(testCase);
                        wordList.set(j, ""); // avoid revisiting!
                    }
                }
            }
            
            steps++;
        }
        
        return 0;
    }
    
    public int differences(String curr, String test) {
        int diff = 0;
        
        for (int i = 0; i < curr.length(); i++) {
            if (curr.charAt(i) != test.charAt(i))
                diff++;
            
            if (diff == 2)
                break;
        }
        
        return diff;
    }
}
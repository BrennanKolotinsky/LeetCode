/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomLeft = bottomLeft;
        this.bottomRight = bottomRight;
    }
};
*/

class Solution {
    
    public Node construct(int[][] grid) {
        // brute force + recursion! -- similar to divide and conquer!
        if (grid.length == 0 || grid[0].length == 0)
            return new Node(true, true);
        
        return dfs(grid, 0, grid.length - 1, 0, grid[0].length - 1);
    }
    
    // recursively call this to construct tree
    public Node dfs(int[][] grid, int xMin, int xMax, int yMin, int yMax) {
        
        boolean same = isSame(grid, xMin, xMax, yMin, yMax);
        Node curr = new Node(grid[xMin][yMin] == 1, same); // set the value to the first value!
        
        // created a leaf
        if (same)
            return curr;
        
        int xMid = xMin + (xMax - xMin) / 2;
        int yMid = yMin + (yMax - yMin) / 2;
        
        curr.topLeft = dfs(grid, xMin, xMid, yMin, yMid);
        curr.topRight = dfs(grid, xMin, xMid, yMid + 1, yMax);
        curr.bottomLeft = dfs(grid, xMid + 1, xMax, yMin, yMid);
        curr.bottomRight = dfs(grid, xMid + 1, xMax, yMid + 1, yMax);
        
        return curr;
    }
    
    // this will be a check to verify if we want to break the tree more! -- If not we are at a leaf
    public boolean isSame(int[][] grid, int xMin, int xMax, int yMin, int yMax) {
        int first = grid[xMin][yMin];
        
        for (int i = xMin; i <= xMax; i++)
            for (int j = yMin; j <= yMax; j++)
                if (first != grid[i][j])
                    return false;
        
        return true; // all values are the same!
    }
}
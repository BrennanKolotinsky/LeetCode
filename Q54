class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> sol = new ArrayList<>();
        
        if (matrix.length == 0 || matrix[0].length == 0)
            return sol;
        
        int moveRight = 1; // 1 indicates, yes, 0 indicates not moving, -1 indicates moving the opposite way
        int moveDown = 0;
        
        int row = 0;
        int col = 0;
        
        while (sol.size() < matrix[0].length * matrix.length) {
            
            sol.add(matrix[row][col]);
            matrix[row][col] = -10000; // visited
            
            if (moveRight == 1) {
                // advance the col if we aren't at the last one yet
                if (col < matrix[0].length - 1 && matrix[row][col + 1] != -10000) {
                    col++;
                } else {
                    moveRight = 0;
                    moveDown = 1;
                    row++;
                }
            } else if (moveDown == 1) {
                // advance the col if we aren't at the last one yet
                if (row < matrix.length - 1 && matrix[row + 1][col] != -10000) {
                    row++;
                } else {
                    moveRight = -1;
                    moveDown = 0;
                    col--;
                }
            } else if (moveRight == -1) {
                // next value hasn't been visited already!
                if (col > 0 && matrix[row][col - 1] != -10000) {
                    col--;
                } else {
                    moveRight = 0;
                    moveDown = -1;
                    row--;
                }
            } else if (moveDown == -1) {
                if (row > 0 && matrix[row - 1][col] != -10000) {
                    row--;
                } else {
                    moveRight = 1;
                    moveDown = 0;
                    col++;
                }
            }
        }
        
        return sol;
    }
}
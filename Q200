class Solution {
    public int numIslands(char[][] grid) {
        // everytime there is a zero OR non existent add 1 -- let's also replace the 1s with 2s to track the places we have already visited
        
        int islands = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == '1') {
                    islands++;
                    Queue<int[]> q = new LinkedList<int[]>();
                    q.offer(new int[]{i, j});
                    
                    while (q.size() != 0) {
                        
                        int size = q.size();
                        for (int z = 0; z < size; z++) {
                            int[] curr = q.poll(); 
                            int row = curr[0];
                            int col = curr[1];
                            grid[row][col] = '2';
                            // System.out.println(Integer.toString(row) + ", " + Integer.toString(col));
                            helper(q, row - 1, col, grid);
                            helper(q, row + 1, col, grid);
                            helper(q, row, col - 1, grid);
                            helper(q, row, col + 1, grid);   
                        }
                    }                    
                }
            }
        }
        
        return islands;
    }
    
    private void helper(Queue<int[]> q, int row, int col, char[][] grid) {
        if (row < 0 || row == grid.length || col < 0 || col == grid[row].length) return;
        
        if (grid[row][col] == '0') {
            return;
        } else if (grid[row][col] == '1') {
            grid[row][col] = '2';
            q.offer(new int[]{row, col});
            return;
        }
        
        // if we already visited -- and the value on grid is 2!
        return;
    }
}
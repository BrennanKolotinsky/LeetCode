class UnionFind {
    int[] conn;
    int islands;
    
    public UnionFind(int n) {
        this.conn = new int[n];
        Arrays.fill(this.conn, -1); // parents are set to negative one!
    }
    
    public void union(int p1, int p2) {
        int parent1 = find(p1);
        int parent2 = find(p2);
        
        if (parent1 == parent2)
            return;
        
        // because we are moving only downwards and right, the first value will always contain the same amount of elements in our disjointed set, or more
        // therefore, ranking is inherenetly built in!
        if (this.conn[parent1] <= this.conn[parent2]) {
            this.conn[parent1] += this.conn[parent2];
            this.conn[parent2] = parent1;
        } else {
            this.conn[parent2] += this.conn[parent1];
            this.conn[parent1] = parent2;    
        }
    }
    
    public int find(int n) {
        // not at the parent yet
        while (this.conn[n] >= 0)
            n = find(this.conn[n]);
        
        return n;
    }
    
    public void calNumIslands() {
        for (int i : this.conn) {
            // parent that isn't just water
            if (i != Integer.MIN_VALUE && i < 0)
                this.islands++;
        }
    }
}

class Solution {
    
    public int[][] mvs = {{1, 0}, {0, 1}, {-1, 0},{0, -1}};
    
    public int numIslands(char[][] grid) {
        if (grid.length == 0)
            return 0;
        
        UnionFind uf = new UnionFind(grid.length * grid[0].length);
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                buildConn(grid, uf, i, j);
            }
        }
        
        uf.calNumIslands();
        return uf.islands;
    }
    
    public void buildConn(char[][] grid, UnionFind uf, int i, int j) {
        if (grid[i][j] == '0') {
            uf.conn[j + i * grid[i].length] = Integer.MIN_VALUE; // let's mark this point as a point to not include in our calculations
            return;
        }

        // connect to all surounding
        for (int[] mv : mvs) {
            int row2 = i + mv[0];
            int col2 = j + mv[1];

            // out of bounds
            if (row2 < 0 || row2 == grid.length || col2 < 0 || col2 == grid[row2].length)
                continue;

            if (grid[row2][col2] == '1')
                uf.union(j + i * grid[i].length, col2 + row2 * grid[i].length); // we initialized the union find as a flat array so the cols + row * cols will give our place in that array (visualize it for a moment if you don't understand)
        }
    }
}
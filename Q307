class NumArray {
    
//     int[] numbers;
//     int[] sum;

//     public NumArray(int[] nums) {
//         this.numbers = nums;
//         this.sum = new int[nums.length];
        
//         if (nums.length == 0)
//             return;
        
//         this.sum[0] = nums[0];
        
//         for (int i = 1; i < nums.length; i++)
//             this.sum[i] = nums[i] + this.sum[i - 1];
//     }
    
//     public void update(int i, int val) {
//         int tmp = val - this.numbers[i];
//         this.numbers[i] = val;
        
//         for (i = i; i < this.sum.length; i++)
//             this.sum[i] += tmp;
//     }
    
//     public int sumRange(int i, int j) {
//         return i == 0 ? this.sum[j] : this.sum[j] - this.sum[i - 1];
//     }
// }

// /**
//  * Your NumArray object will be instantiated and called as such:
//  * NumArray obj = new NumArray(nums);
//  * obj.update(i,val);
//  * int param_2 = obj.sumRange(i,j);
//  */

 public class NumArray {

    class SegmentTreeNode {
        int start, end;
        SegmentTreeNode left, right;
        int sum;

        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
      
    SegmentTreeNode root = null;
   
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }

    private SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if (start > end) {
            return null;
        } else {
            SegmentTreeNode ret = new SegmentTreeNode(start, end);
            if (start == end) {
                ret.sum = nums[start];
            } else {
                int mid = start  + (end - start) / 2;             
                ret.left = buildTree(nums, start, mid); // as up to the mid point onto the left side, additional nodes are on the left
                ret.right = buildTree(nums, mid + 1, end);
                ret.sum = ret.left.sum + ret.right.sum;
            }         
            return ret;
        }
    }
   
    public void update(int i, int val) {
        updateTree(root, i, val);
    }
    
    void updateTree(SegmentTreeNode root, int pos, int val) {
        if (root.start == root.end) {
           root.sum = val;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            // left side contains mid
            if (pos <= mid) {
                 updateTree(root.left, pos, val);
            } else {
                 updateTree(root.right, pos, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }

    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
    public int sumRange(SegmentTreeNode root, int start, int end) {
        if (root.end == end && root.start == start) {
            return root.sum;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            
            // keep in mind extra nodes are on the left side as per the creation process!
            if (start >= mid + 1) {
                return sumRange(root.right, start, end);
            } else if (end <= mid) {
                return sumRange(root.left, start, end);
            }  else {    
                return sumRange(root.right, mid+1, end) + sumRange(root.left, start, mid);
            }
        }
    }
}
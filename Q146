class Node {
    int key, value;
    Node prev, next;
    
    public Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}

class LRUCache {
    
    int capacity;
    HashMap<Integer, Node> map;
    
    Node head = new Node(0, 0);
	Node tail = new Node(0, 0);
    // connect the two
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.map = new HashMap<>();
        
        head.next = tail;
        head.prev = null;
        tail.prev = head;
        tail.next = null;
    }
    
    public void deleteNode(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    public void addToHead(Node n) {
        Node headNext = head.next; // remember head is set to a value of zero!
        head.next = n;
        headNext.prev = n;
        n.next = headNext;
        n.prev = head;
    }
    
    public int get(int key) {
        if (map.containsKey(key)) {
            Node n = map.get(key);
            deleteNode(n);
            addToHead(n);
            return n.value;
        }
        
        return -1;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node n = map.get(key);
            deleteNode(n);
            n.value = value;
            addToHead(n);
        } else {
            if (map.size() == capacity) {
                map.remove(tail.prev.key);
                deleteNode(tail.prev);
            }
            
            Node n = new Node(key, value);
            addToHead(n);
            
            map.put(key, n);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
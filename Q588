class File {
    String content = "";
    boolean isFile = false;
    HashMap<String, File> children;
    
    public File(String c, boolean isFile) {
        this.content = c;
        this.isFile = isFile;
        this.children = new HashMap<>();
    }
}


class FileSystem {
    
    File root = null;

    public FileSystem() {
        this.root = new File("", false);
    }
    
    public List<String> ls(String path) {
        
        List<String> sol = new ArrayList<>();
        String[] dirs = path.split("/");
        
        File node = root;
        String name = "";
        
        for (String dir : dirs) {
            
            // ex. abc//al
            if (dir.length() == 0)
                continue;
            
            // there is no solution!
            if (!node.children.containsKey(dir))
                return sol;
            
            name = dir;
            node = node.children.get(dir);
        }
        
        if (node.isFile) {
            sol.add(name);
        } else {
            for (String key : node.children.keySet()) {
                sol.add(key);
            }
        }
        
        Collections.sort(sol);
        
        return sol;
    }
    
    public void mkdir(String path) {
        String[] dirs = path.split("/");
        File node = root;
        
        for (String dir : dirs) {
            if (dir.length() == 0) continue;
            
            if (!node.children.containsKey(dir)) {
                node.children.put(dir, new File("", false));
            }
            
            node = node.children.get(dir);
        }
    }
    
    public void addContentToFile(String filePath, String content) {
        String[] dirs = filePath.split("/");
        File node = root;
        
        for (String dir : dirs) {
            if (dir.length() == 0) continue;
            
            if (!node.children.containsKey(dir)) {
                node.children.put(dir, new File("", true));
            }
            
            node = node.children.get(dir);
        }
        
        node.isFile = true; // if the file wasn't previously created it is now!
        node.content = node.content + content;
    }
    
    public String readContentFromFile(String filePath) {
        String[] dirs = filePath.split("/");
        File node = root;
        
        for (String dir : dirs) {
            if (dir.length() == 0) continue;
            
            if (!node.children.containsKey(dir)) {
                node.children.put(dir, new File("", false));
            }
            
            node = node.children.get(dir);
        }
        
        node.isFile = true;
        return node.content;
    }
}

/**
 * Your FileSystem object will be instantiated and called as such:
 * FileSystem obj = new FileSystem();
 * List<String> param_1 = obj.ls(path);
 * obj.mkdir(path);
 * obj.addContentToFile(filePath,content);
 * String param_4 = obj.readContentFromFile(filePath);
 */
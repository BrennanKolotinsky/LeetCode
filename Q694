class Solution {
    int[][] dir = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    public int numDistinctIslands(int[][] grid) {
        
        HashSet<String> st = new HashSet<>();
        int cnt = 0;
        
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == 1) {
                    StringBuilder sb = new StringBuilder("");
                    helper(sb, grid, i, j, 0, 0);
                    String tmp = sb.toString();
                    if (!st.contains(tmp)) {
                        st.add(tmp);
                        ++cnt;
                    }
                }
            }
        }
        
        return cnt;
    }
    
    public void helper(StringBuilder sb, int[][] grid, int i, int j, int x, int y) {
        if (i + x < 0 || j + y < 0 || i + x == grid.length || j + y == grid[0].length || grid[i + x][j + y] == 0)
            return;
        
        
        grid[i + x][j + y] = 0;
        sb.append(x + "" + y);
        
        for (int[] d : dir)
            helper(sb, grid, i, j, x + d[0], y + d[1]);
    }
}
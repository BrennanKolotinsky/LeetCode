/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    // MERGE SORT
    public ListNode sortList(ListNode head) {
        
        if (head == null || head.next == null)
            return head;
        
        // cut the list in half
        ListNode prev = null, slow = head, fast = head;
        
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;    
            fast = fast.next.next;
        }
        
        prev.next = null; // cut it in half
        
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow); // slow is at midpoint
        return mergeSort(l1, l2);
    }
    
    public ListNode mergeSort(ListNode left, ListNode mid) {
        ListNode leftHead = new ListNode(0); // return this value
        ListNode leftHeadMoving = leftHead;
    
        while (left != null && mid != null) {
            if (left.val <= mid.val) {
                leftHeadMoving.next = left;
                left = left.next;
            } else {
                leftHeadMoving.next = mid;
                mid = mid.next;
            }
            leftHeadMoving = leftHeadMoving.next;
        }
        
        if (left != null) {
            leftHeadMoving.next = left;
        }
        
        if (mid != null) {
            leftHeadMoving.next = mid;
        }
        
        return leftHead.next;
    }
}
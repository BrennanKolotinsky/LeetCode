class Solution {
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < board[0].length; j++)
                if ((board[i][j] == word.charAt(0)) && dfs(0, i, j, board, word)) 
                    return true;
        
        return false;
    }
    
    public boolean dfs(int curr, int i, int j, char[][] board, String word) {
        if (curr == word.length())
            return true;
        
        if (i == -1 || i == board.length || j == -1 || j == board[0].length || board[i][j] != word.charAt(curr))
            return false;
        
        char tmp = board[i][j];
        board[i][j] = ' ';

        boolean success = dfs(curr + 1, i + 1, j, board, word) || 
                          dfs(curr + 1, i - 1, j, board, word) ||
                          dfs(curr + 1, i, j + 1, board, word) || 
                          dfs(curr + 1, i, j - 1, board, word);
        
        board[i][j] = tmp; // reset
        return success;
    }
}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        int cnt = 0;
        
        int[][] dir = {{1, 0}, {1, 1}, {0, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}, {-1, 1}};
        
        if (grid[grid.length - 1][grid[0].length - 1] == 1)
            return -1;
        
        while (!q.isEmpty()) {
            
            int len = q.size();
            ++cnt;
            
            while (len > 0) {
                
                int[] curr = q.poll();
                
                if (grid[curr[0]][curr[1]] == 0) {                    
                    if (curr[0] == grid.length - 1 && curr[1] == grid[0].length - 1)
                        return cnt;
                    
                    for (int i = 0; i < dir.length; ++i)
                        if (helper(curr[0] + dir[i][0], curr[1] + dir[i][1], grid.length, grid[0].length))
                            q.offer(new int[]{curr[0] + dir[i][0], curr[1] + dir[i][1]});
                            
                }
                
                grid[curr[0]][curr[1]] = 1; // saves time of revisting point!
                
                --len;
            }
        }
        
        return -1;
    }
    
    public boolean helper(int n, int m, int rows, int cols) {
        return n < rows && m < cols && n >= 0 && m >= 0;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null)
            return "[]";
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        
        while(q.isEmpty() == false) {
            
            boolean allNull = true; // if we don't find any values below this level, let's not include another row (otherwise it would be an endless loop of nulls)
            int len = q.size();
            for (int i = 0; i < len; i++) {
                TreeNode curr = q.poll();
                
                if (curr != null) {
                    sb.append(String.valueOf(curr.val)).append(",");
                    
                    if (curr.left != null || curr.right != null) {
                        allNull = false; // we found one value at this LEVEL!
                    }
                    
                    q.offer(curr.left);
                    q.offer(curr.right);
                } else {
                    sb.append("null,");
                }
            }
            
            if (allNull == true) {
                break;
            }
        }
            
        sb.setLength(sb.length() - 1); // pop the last comma
        sb.append("]");
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == "[]") return null;
        
        // let's start by using a regex to replace all null with -10000 (easy to set as null later)
        // then let's pop the first and last element
        // then let's separate into an array based on commas
        // then let's queue through it!
        data = data.substring(1);
        data = data.substring(0, data.length() - 1);
        
        String[] tokens = data.split(",", -1);
        
        // for (String token : tokens) {
        //     System.out.println(token);
        // }
        
        TreeNode root = new TreeNode(Integer.parseInt(tokens[0]));
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        
        int added = 1;
        
        while (added < tokens.length) {
            
            int len = q.size();
            
            for (int j = 0; j < len; j++) {
                TreeNode curr = q.poll();
                
                // add the left side
                if (!tokens[added].equals("null")) {
                    curr.left = new TreeNode(Integer.parseInt(tokens[added]));
                    q.offer(curr.left);
                }

                // add the right side
                if (!tokens[added + 1].equals("null")) {
                    curr.right = new TreeNode(Integer.parseInt(tokens[added + 1]));
                    q.offer(curr.right);
                }
                
                added += 2;
            }
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
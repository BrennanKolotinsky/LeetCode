/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    double max = 0;
    
    public double maximumAverageSubtree(TreeNode root) {
        
        if (root == null)
            return 0;
        
        double[] left = dfs(root.left);
        double[] right = dfs(root.right);
        
        double sum = left[1] + right[1] + root.val; // sume of values
        double cnt = left[0] + right[0] + 1; // count of nodes
        double avg = sum / cnt;
        
        max = Math.max(max, avg);
        
        return max;
    }
    
    // return int[]{cnt, sum}
    public double[] dfs(TreeNode root) {
        if (root == null)
            return new double[]{0, 0};
        
        double[] left = dfs(root.left);
        double[] right = dfs(root.right);
        
        double sum = left[1] + right[1] + root.val; // sum of values
        double cnt = left[0] + right[0] + 1; // count of nodes
        double avg = sum / cnt;
        
        max = Math.max(max, avg);
        return new double[]{cnt, sum};
    }
}
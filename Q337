/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rob(TreeNode root) {
        return Math.max(search(root, true), search(root, false));
    }
    
    public int search(TreeNode root, boolean prevVisited) {
        
        if (root == null)
            return 0;
        
        if (prevVisited == false)
            return Math.max(root.val + search(root.left, true) + search(root.right, true), search(root.left, false) + search(root.right, false));
        else
            return search(root.left, false) + search(root.right, false); // can't visit and can't add the current one, but can the next one
    }
}
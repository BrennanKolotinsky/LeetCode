class Solution {
    public int findPeakElement(int[] nums) {
        if (nums.length == 1) 
            return 0;
        if (nums.length == 2) {
            if (nums[0] > nums[1]) return 0;
            return 1;
        }
        
        return helper(0, nums.length - 1, nums);
    }
    
    public int helper(int low, int high, int[] nums) {
        
        int mid = low + (high - low) / 2;
        
        // check our starting position
        if (mid == 0)
            if (nums[0] > nums[1])
                return 0;
            return -1;
        
        // check our ending position
        if (mid == nums.length - 1)
            if (nums[mid] > nums[mid - 1])
                return mid;
        
        // we found our point
        if (nums[mid] > nums[mid + 1] && nums[mid] > nums[mid - 1])
            return mid;
        
        // let's avoid a cycle -- but we have to do the above checks first -- there are no matches in this section
        if (high == low)
            return -1;
        
        // check left, if nothing returned then check right!
        int left = helper(low, mid, nums);
        
        if (left != -1) return left;
        return helper(mid + 1, high, nums);
    }
}
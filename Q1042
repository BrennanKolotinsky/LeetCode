class Garden {
    public static final int[] FLOWER_TYPES = {1, 2, 3, 4};
    int flowerType;
    List<Garden> connectedGardens;
    
    // initialize a new garden
    public Garden() {
        flowerType = -1;
        connectedGardens = new ArrayList<Garden>();
    }
    
    public void setUniqueFlowerType() {
        HashSet<Integer> takenByConnectedGarden = new HashSet();
        
        // add all the taken flowers into a hashset
        for (Garden garden : connectedGardens) {
            if (garden.flowerType != -1) takenByConnectedGarden.add(garden.flowerType);
        }
        
        // loop over the list and pick one that isn't taken yet
        for (int flowerType : FLOWER_TYPES) {
            if (!takenByConnectedGarden.contains(flowerType)) {
                this.flowerType = flowerType;
                break;
            }
        }
        
    }
}


class Solution {
    public int[] gardenNoAdj(int N, int[][] paths) {
        
        // create the gardens
        Garden[] graph = new Garden[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new Garden();
        }
        
        for (int[] path : paths) {
            int p1 = path[0] - 1; // subtract one cuz they start at index 0
            int p2 = path[1] - 1;
            
            Garden garden1 = graph[p1];
            Garden garden2 = graph[p2];
            garden1.connectedGardens.add(garden2);
            garden2.connectedGardens.add(garden1);
        }
        
        int index = 0;
        
        int[] sol = new int[N];
        
        for (Garden garden : graph) {
            garden.setUniqueFlowerType();
            sol[index] = garden.flowerType;
            index++;
        }
        
        return sol;
    }
}
class Solution {
    
    int[][] memo; // 0 indicates haven't found, -1 is not possible, 1 is possible!
    
    public boolean isMatch(String s, String p) {
        memo = new int[s.length()][p.length()];
        return dfs(s, p, 0, 0);
    }
    
    public boolean dfs(String s, String p, int p1, int p2) {
        
        // let's check if 
        if (p1 == s.length()) {
            // keep advancing the star characters!
            while (p2 < p.length() && p.charAt(p2) == '*')
                p2++;
            
            // did we get to the end?
            if (p2 == p.length()) {
                return true;
            }
            
            return false;
        // still have characters left!
        } else if (p2 == p.length()) {
            return false;
        }
        
        if (memo[p1][p2] == -1)
            return false;
        
        if (memo[p1][p2] == 1)
            return true;
        
        boolean possible = false;
        
        if (p.charAt(p2) == '?')
            possible = dfs(s, p, p1 + 1, p2 + 1);
        else if (p.charAt(p2) == '*') {
            // useless starting *
            if (dfs(s, p, p1, p2 + 1))
                possible = true;
            
            for (int i = p1; i < s.length(); i++)
                if (dfs(s, p, i + 1, p2 + 1))
                    possible = true;
        }     
        else
            if (s.charAt(p1) == p.charAt(p2))
                possible = dfs(s, p, p1 + 1, p2 + 1);
            else
                possible = false;
        
        if (possible)
            memo[p1][p2] = 1;
        else
            memo[p1][p2] = -1;
            
        return possible;
    }
}
class TicTacToe {
    
    int[] playsToWinRow; // negative represents player two winning, zero represents not taken, greater than cnt to win indicates impossible
    int[] playsToWinCol;
    int playsToWinDiagnol1 = 0;
    int playsToWinDiagnol2 = 0;
    int cntToWin;

    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        playsToWinRow = new int[n];
        playsToWinCol = new int[n];
        this.cntToWin = n;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        
        int increment = player == 1 ? 1 : -1;
        
        // simple solution
        playsToWinRow[row] += increment;
        playsToWinCol[col] += increment;

        if (row == col) {
            playsToWinDiagnol1 += increment;
        }

        if (row + col == this.cntToWin - 1) {
            playsToWinDiagnol2 += increment;
        }

        if (Math.abs(playsToWinRow[row]) == this.cntToWin || Math.abs(playsToWinCol[col]) == this.cntToWin || Math.abs(playsToWinDiagnol2) == this.cntToWin || Math.abs(playsToWinDiagnol1) == this.cntToWin)
            return player;
        
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
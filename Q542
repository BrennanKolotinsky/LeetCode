class Solution {
    
    int[][] mvs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int[][] updateMatrix(int[][] matrix) {        
        
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == 0)
                    continue;
                
                Queue<int[]> q = new LinkedList<>();
                q.offer(new int[]{i, j});
                int moves = 0;
                boolean fnd = false;
                
                while (!q.isEmpty()) {
                    
                    int len = q.size();
                    
                    while (len > 0) {
                    
                        int[] curr = q.poll();
                        
                        for (int[] mv : mvs) {
                            int status = search(matrix, curr[0] + mv[0], curr[1] + mv[1]);
                            if (status == 0)
                                q.offer(new int[]{curr[0] + mv[0], curr[1] + mv[1]});
                            else if (status == 1)
                                fnd = true;a
                        }
                        
                        if (fnd)
                            break;
                        
                        len--;
                    }
                    
                    moves++;
                    
                    if (fnd)
                        break;
                }
                
                matrix[i][j] = moves;
            }
        }
        
        return matrix;
    }
    
    // -1 indicates out of range, 0 indicates not found, 1 indicates found
    public int search(int[][] matrix, int i, int j) {
        if(i < 0 || i == matrix.length || j < 0 || j == matrix[i].length)
            return -1;
        else if (matrix[i][j] > 0)
            return 0;
        return 1;
    }
}
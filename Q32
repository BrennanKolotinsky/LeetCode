class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> st = new Stack<>();
        int max = 0, left = -1; // left is negative one because i starts at 0 rather than 1 -- left, keeps track of  the first working value in our set
                
        for (int i = 0; i < s.length(); i++) {
            
            if (s.charAt(i) == ')' && st.isEmpty()) {
                left = i;
            } else if (s.charAt(i) == ')' && !st.isEmpty()) {
                st.pop();
                
                // first found at new position
                if (st.isEmpty())
                    max = Math.max(i - left, max);
                // still leaving the furthest position that is a completing (
                else
                    max = Math.max(i - st.peek(), max);
            } else if (s.charAt(i) == '(')
                st.push(i);
        }
        
        return max;
    }
}
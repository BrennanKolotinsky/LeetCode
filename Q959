class Solution {
    
    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int regionsBySlashes(String[] grid) {
        
        if (grid.length == 0)
            return 0;
        
        // solve with the count the islands problem!
        int n = grid.length, m = grid[0].length();
        
        // let's make a our graph
        int[][] g = new int[n * 3][m * 3]; // every position can be divided into three parts
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i].charAt(j) == '/') {
                    g[i * 3][j * 3 + 2] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i].charAt(j) == '\\') {
                    g[i * 3][j * 3] = 1;
                    g[i * 3 + 1][j * 3 + 1] = 1;
                    g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        
        int cnt = 0;
        
        // DFS
        for (int i=0; i < g.length; i++){
            for (int j = 0; j < g[0].length; j++){
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    cnt++;
                }
            }
        }
        
        return cnt;
    }
                    
    public void dfs(int[][] g, int row, int col) {
        if (row < 0 || row == g.length || col < 0 || col == g[row].length || g[row][col] == 1)
            return;
        
        g[row][col] = 1;
        
        for (int[] dir : dirs)
            dfs(g, row + dir[0], col + dir[1]);
    }
}
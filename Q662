/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        Queue<TreeNode> q = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();
        q.offer(root);
        q2.offer(0);
        int max = 0;
        while (!q.isEmpty()) {
            
            int len = q.size();
            int start = -1;
            while (len > 0) {
                
                TreeNode curr = q.poll();
                int p = q2.poll();
                
                if (start == -1) {
                    max = Math.max(1, max);
                    start = p;
                } else
                    max = Math.max(p - start + 1, max);
                
                if (curr.left != null) {
                    q.offer(curr.left);
                    q2.offer(p * 2);
                }
                
                if (curr.right != null) {
                    q.offer(curr.right);
                    q2.offer(p * 2 + 1);
                }
                
                len--;
            }
        }
        
        return max;
    }
}
class Solution {
    public int getKth(int lo, int hi, int k) {
        HashMap<Integer, Integer> sol = new HashMap<Integer, Integer>();
        int[][] arr = new int[hi - lo + 1][2];
        int j = 0;
        
        for (int i = lo; i <= hi; i++) {
            int curr = i;
            int steps = 0;
            while (curr != 1) {
                if (sol.containsKey(curr) == true) {
                    steps += sol.get(curr);
                    curr = 1;
                } else {
                    if ((curr & 1) == 1) {
                        curr = curr * 3 + 1;
                    } else {
                        curr /= 2;
                    }
                    steps++;                 
                }
            }
            
            sol.put(i, steps);
            
            arr[j][0] = i;
            arr[j][1] = steps;
            j++;
        }
        
        System.out.println(sol);
        
        // comparator inspired by this solution: https://leetcode.com/problems/sort-integers-by-the-power-value/discuss/546468/Java-DP-memoization(using-map)-and-sort
        Arrays.sort(arr,new Comparator<int[]>(){
           public int compare(int[] a,int[] b){
               if(a[1] - b[1] == 0) return a[0] - b[0];
               return a[1] - b[1];
           } 
        });
        
        return arr[k-1][0];        
    }
}